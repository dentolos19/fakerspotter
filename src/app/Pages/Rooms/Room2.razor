@page "/room/2"

@inject NavigationManager NavigationManager
@inject Random Random
@inject DatabaseService DatabaseService
@inject UserService UserService
@inject VariableService VariableService

<RoomPanel
    RoomName="@string.Format("Room 2: Spot the fake headline! ({0}/5)", QuestionsAnswered)"
    RoomPoints="Points" IsCompleted="UserService.IsRoomTwoCompleted"
    IsLocked="!UserService.IsRoomOneCompleted"
    NextRoomEndpoint="room3"
    PreviousRoomEndpoint="room1">
    <RoomContent>
        @if (VariableService.ClosedHeadlineQuestions is { Length: > 0 } && VariableService.MultipleHeadlineQuestions is { Length: > 0 })
        {
            @QuestionPanel
        }
        else
        {
            <SpinKit Type="SpinKitType.Pulse" Centered/>
        }
    </RoomContent>
</RoomPanel>

@code
{

    private int Points { get; set; } = 200;
    private int QuestionsAnswered { get; set; }
    private RenderFragment QuestionPanel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        VariableService.ClosedHeadlineQuestions ??= await DatabaseService.GetClosedHeadlineQuestionAsync();
        VariableService.MultipleHeadlineQuestions ??= await DatabaseService.GetMultipleHeadlineQuestionsAsync();
        Console.WriteLine($"CHQ: {VariableService.ClosedHeadlineQuestions.Length}");
        Console.WriteLine($"MHQ: {VariableService.MultipleHeadlineQuestions.Length}");
        NextQuestion();
    }

    private void OnQuestionCompleted(bool answeredCorrectly)
    {
        if (answeredCorrectly)
        {
            QuestionsAnswered++;
        }
        else
        {
            QuestionsAnswered = 0;
            Points -= Random.Next(0, 40);
            if (Points < 100)
                NextRoom();
        }
        if (QuestionsAnswered < 5)
        {
            NextQuestion();
        }
        else
        {
            NextRoom();
        }
    }
    
    private RenderFragment BuildClosedQuestion(ClosedHeadlineQuestion question)
    {
        return builder =>
        {
            builder.OpenComponent(0, typeof(ClosedHeadlineQuestionPanel));
            builder.AddAttribute(1, "Question", question);
            builder.AddAttribute(2, "OnComplete", EventCallback.Factory.Create<bool>(this, OnQuestionCompleted));
            builder.CloseComponent();
        };
    }
    
    private RenderFragment BuildMultipleStatementQuestion(MultipleHeadlineQuestion question)
    {
        return builder =>
        {
            builder.OpenComponent(0, typeof(MultipleHeadlineQuestionPanel));
            builder.AddAttribute(1, "Question", question);
            builder.AddAttribute(2, "OnComplete", EventCallback.Factory.Create<bool>(this, OnQuestionCompleted));
            builder.CloseComponent();
        };
    }

    private void NextQuestion()
    {
        if (Random.Next(0, 2) == 0)
        {
            var question = VariableService.ClosedHeadlineQuestions[Random.Next(VariableService.ClosedHeadlineQuestions.Length)];
            QuestionPanel = BuildClosedQuestion(question);
        }
        else
        {
            var question = VariableService.MultipleHeadlineQuestions[Random.Next(VariableService.MultipleHeadlineQuestions.Length)];
            QuestionPanel = BuildMultipleStatementQuestion(question);
        }
    }

    private void NextRoom()
    {
        UserService.PointsAccumulated += Points;
        UserService.IsRoomTwoCompleted = true;
        NavigationManager.NavigateTo("room/3");
    }

}