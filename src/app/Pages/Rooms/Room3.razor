@page "/room/3"

@inject NavigationManager NavigationManager
@inject Random Random
@inject DatabaseService DatabaseService
@inject UserService UserService
@inject VariableService VariableService

<RoomPanel
    RoomName="@string.Format("Room 3: Spot the fake news! ({0}/5)", QuestionsAnswered)"
    RoomPoints="Points"
    IsCompleted="UserService.IsRoomThreeCompleted"
    IsLocked="!UserService.IsRoomTwoCompleted"
    NextRoomEndpoint="finish"
    PreviousRoomEndpoint="room2">
    <RoomContent>
        @if (VariableService.NewsQuestions is { Length: > 0 })
        {
            @QuestionPanel
        }
        else
        {
            <SpinKit Type="SpinKitType.Pulse" Centered/>
        }
    </RoomContent>
</RoomPanel>

@code
{

    private int Points { get; set; } = 500;
    private int QuestionsAnswered { get; set; }
    private RenderFragment QuestionPanel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        VariableService.NewsQuestions ??= await DatabaseService.GetNewsQuestionsAsync();
        NextQuestion();
    }

    private void OnQuestionCompleted(bool answeredCorrectly)
    {
        if (answeredCorrectly)
        {
            QuestionsAnswered++;
        }
        else
        {
            QuestionsAnswered = 0;
            Points -= Random.Next(0, 100);
            if (Points < 100)
                NextRoom();
        }
        if (QuestionsAnswered < 5)
        {
            NextQuestion();
        }
        else
        {
            NextRoom();
        }
    }

    private RenderFragment BuildQuestion(NewsQuestion question)
    {
        return builder =>
        {
            builder.OpenComponent(0, typeof(NewsQuestionPanel));
            builder.AddAttribute(1, "Question", question);
            builder.AddAttribute(2, "OnComplete", EventCallback.Factory.Create<bool>(this, OnQuestionCompleted));
            builder.CloseComponent();
        };
    }

    private void NextQuestion()
    {
        var question = VariableService.NewsQuestions[Random.Next(VariableService.NewsQuestions.Length)];
        QuestionPanel = BuildQuestion(question);
    }

    private void NextRoom()
    {
        UserService.PointsAccumulated += Points;
        UserService.IsRoomThreeCompleted = true;
        NavigationManager.NavigateTo("finish");
    }

}